$date
	Sun May 10 00:34:18 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # zero $end
$var wire 32 $ shifter_out [31:0] $end
$var wire 32 % shamt [31:0] $end
$var wire 32 & result [31:0] $end
$var wire 32 ' now_address [31:0] $end
$var wire 32 ( next_address [31:0] $end
$var wire 32 ) instruction [31:0] $end
$var wire 32 * extend_shift_two [31:0] $end
$var wire 1 + extend_choose $end
$var wire 32 , extend [31:0] $end
$var wire 32 - current_program [31:0] $end
$var wire 1 . branch_judge $end
$var wire 1 / branch $end
$var wire 32 0 address_after_adder [31:0] $end
$var wire 32 1 ZeroExtend [31:0] $end
$var wire 32 2 SignExtend [31:0] $end
$var wire 32 3 RtALU [31:0] $end
$var wire 1 4 RegWrite $end
$var wire 1 5 RegDst $end
$var wire 5 6 RegDout [4:0] $end
$var wire 32 7 RT [31:0] $end
$var wire 32 8 RS [31:0] $end
$var wire 32 9 ALUoutput [31:0] $end
$var wire 1 : ALUSrc $end
$var wire 3 ; ALUOp [2:0] $end
$var wire 4 < ALUCtrl [3:0] $end
$var reg 32 = Reg_current_program [31:0] $end
$scope module AC $end
$var wire 6 > funct_i [5:0] $end
$var wire 3 ? ALUOp_i [2:0] $end
$var reg 4 @ ALUCtrl_o [3:0] $end
$upscope $end
$scope module ALU_unit $end
$var wire 4 A ctrl_i [3:0] $end
$var wire 32 B src2_i [31:0] $end
$var wire 32 C src1_i [31:0] $end
$var wire 32 D outcome [31:0] $end
$var wire 32 E C [31:0] $end
$var reg 1 F A_invert $end
$var reg 1 G B_invert $end
$var reg 1 H bus $end
$var reg 1 I cin $end
$var reg 1 J less $end
$var reg 2 K operation [1:0] $end
$var reg 32 L result_o [31:0] $end
$var reg 1 # zero_o $end
$scope begin gen_loop[1] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 M cin $end
$var wire 2 N operation [1:0] $end
$var wire 1 O src1 $end
$var wire 1 P src2 $end
$var wire 1 Q sum $end
$var wire 1 R cout $end
$var reg 1 S A $end
$var reg 1 T A_bar $end
$var reg 1 U B $end
$var reg 1 V B_bar $end
$var reg 1 W result $end
$scope module M1 $end
$var wire 1 M cin $end
$var wire 1 R cout $end
$var wire 1 Q sum $end
$var wire 1 S x $end
$var wire 1 U y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[2] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 X cin $end
$var wire 2 Y operation [1:0] $end
$var wire 1 Z src1 $end
$var wire 1 [ src2 $end
$var wire 1 \ sum $end
$var wire 1 ] cout $end
$var reg 1 ^ A $end
$var reg 1 _ A_bar $end
$var reg 1 ` B $end
$var reg 1 a B_bar $end
$var reg 1 b result $end
$scope module M1 $end
$var wire 1 X cin $end
$var wire 1 ] cout $end
$var wire 1 \ sum $end
$var wire 1 ^ x $end
$var wire 1 ` y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[3] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 c cin $end
$var wire 2 d operation [1:0] $end
$var wire 1 e src1 $end
$var wire 1 f src2 $end
$var wire 1 g sum $end
$var wire 1 h cout $end
$var reg 1 i A $end
$var reg 1 j A_bar $end
$var reg 1 k B $end
$var reg 1 l B_bar $end
$var reg 1 m result $end
$scope module M1 $end
$var wire 1 c cin $end
$var wire 1 h cout $end
$var wire 1 g sum $end
$var wire 1 i x $end
$var wire 1 k y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[4] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 n cin $end
$var wire 2 o operation [1:0] $end
$var wire 1 p src1 $end
$var wire 1 q src2 $end
$var wire 1 r sum $end
$var wire 1 s cout $end
$var reg 1 t A $end
$var reg 1 u A_bar $end
$var reg 1 v B $end
$var reg 1 w B_bar $end
$var reg 1 x result $end
$scope module M1 $end
$var wire 1 n cin $end
$var wire 1 s cout $end
$var wire 1 r sum $end
$var wire 1 t x $end
$var wire 1 v y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[5] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 y cin $end
$var wire 2 z operation [1:0] $end
$var wire 1 { src1 $end
$var wire 1 | src2 $end
$var wire 1 } sum $end
$var wire 1 ~ cout $end
$var reg 1 !" A $end
$var reg 1 "" A_bar $end
$var reg 1 #" B $end
$var reg 1 $" B_bar $end
$var reg 1 %" result $end
$scope module M1 $end
$var wire 1 y cin $end
$var wire 1 ~ cout $end
$var wire 1 } sum $end
$var wire 1 !" x $end
$var wire 1 #" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[6] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 &" cin $end
$var wire 2 '" operation [1:0] $end
$var wire 1 (" src1 $end
$var wire 1 )" src2 $end
$var wire 1 *" sum $end
$var wire 1 +" cout $end
$var reg 1 ," A $end
$var reg 1 -" A_bar $end
$var reg 1 ." B $end
$var reg 1 /" B_bar $end
$var reg 1 0" result $end
$scope module M1 $end
$var wire 1 &" cin $end
$var wire 1 +" cout $end
$var wire 1 *" sum $end
$var wire 1 ," x $end
$var wire 1 ." y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[7] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 1" cin $end
$var wire 2 2" operation [1:0] $end
$var wire 1 3" src1 $end
$var wire 1 4" src2 $end
$var wire 1 5" sum $end
$var wire 1 6" cout $end
$var reg 1 7" A $end
$var reg 1 8" A_bar $end
$var reg 1 9" B $end
$var reg 1 :" B_bar $end
$var reg 1 ;" result $end
$scope module M1 $end
$var wire 1 1" cin $end
$var wire 1 6" cout $end
$var wire 1 5" sum $end
$var wire 1 7" x $end
$var wire 1 9" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[8] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 <" cin $end
$var wire 2 =" operation [1:0] $end
$var wire 1 >" src1 $end
$var wire 1 ?" src2 $end
$var wire 1 @" sum $end
$var wire 1 A" cout $end
$var reg 1 B" A $end
$var reg 1 C" A_bar $end
$var reg 1 D" B $end
$var reg 1 E" B_bar $end
$var reg 1 F" result $end
$scope module M1 $end
$var wire 1 <" cin $end
$var wire 1 A" cout $end
$var wire 1 @" sum $end
$var wire 1 B" x $end
$var wire 1 D" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[9] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 G" cin $end
$var wire 2 H" operation [1:0] $end
$var wire 1 I" src1 $end
$var wire 1 J" src2 $end
$var wire 1 K" sum $end
$var wire 1 L" cout $end
$var reg 1 M" A $end
$var reg 1 N" A_bar $end
$var reg 1 O" B $end
$var reg 1 P" B_bar $end
$var reg 1 Q" result $end
$scope module M1 $end
$var wire 1 G" cin $end
$var wire 1 L" cout $end
$var wire 1 K" sum $end
$var wire 1 M" x $end
$var wire 1 O" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[10] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 R" cin $end
$var wire 2 S" operation [1:0] $end
$var wire 1 T" src1 $end
$var wire 1 U" src2 $end
$var wire 1 V" sum $end
$var wire 1 W" cout $end
$var reg 1 X" A $end
$var reg 1 Y" A_bar $end
$var reg 1 Z" B $end
$var reg 1 [" B_bar $end
$var reg 1 \" result $end
$scope module M1 $end
$var wire 1 R" cin $end
$var wire 1 W" cout $end
$var wire 1 V" sum $end
$var wire 1 X" x $end
$var wire 1 Z" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[11] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 ]" cin $end
$var wire 2 ^" operation [1:0] $end
$var wire 1 _" src1 $end
$var wire 1 `" src2 $end
$var wire 1 a" sum $end
$var wire 1 b" cout $end
$var reg 1 c" A $end
$var reg 1 d" A_bar $end
$var reg 1 e" B $end
$var reg 1 f" B_bar $end
$var reg 1 g" result $end
$scope module M1 $end
$var wire 1 ]" cin $end
$var wire 1 b" cout $end
$var wire 1 a" sum $end
$var wire 1 c" x $end
$var wire 1 e" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[12] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 h" cin $end
$var wire 2 i" operation [1:0] $end
$var wire 1 j" src1 $end
$var wire 1 k" src2 $end
$var wire 1 l" sum $end
$var wire 1 m" cout $end
$var reg 1 n" A $end
$var reg 1 o" A_bar $end
$var reg 1 p" B $end
$var reg 1 q" B_bar $end
$var reg 1 r" result $end
$scope module M1 $end
$var wire 1 h" cin $end
$var wire 1 m" cout $end
$var wire 1 l" sum $end
$var wire 1 n" x $end
$var wire 1 p" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[13] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 s" cin $end
$var wire 2 t" operation [1:0] $end
$var wire 1 u" src1 $end
$var wire 1 v" src2 $end
$var wire 1 w" sum $end
$var wire 1 x" cout $end
$var reg 1 y" A $end
$var reg 1 z" A_bar $end
$var reg 1 {" B $end
$var reg 1 |" B_bar $end
$var reg 1 }" result $end
$scope module M1 $end
$var wire 1 s" cin $end
$var wire 1 x" cout $end
$var wire 1 w" sum $end
$var wire 1 y" x $end
$var wire 1 {" y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[14] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 ~" cin $end
$var wire 2 !# operation [1:0] $end
$var wire 1 "# src1 $end
$var wire 1 ## src2 $end
$var wire 1 $# sum $end
$var wire 1 %# cout $end
$var reg 1 &# A $end
$var reg 1 '# A_bar $end
$var reg 1 (# B $end
$var reg 1 )# B_bar $end
$var reg 1 *# result $end
$scope module M1 $end
$var wire 1 ~" cin $end
$var wire 1 %# cout $end
$var wire 1 $# sum $end
$var wire 1 &# x $end
$var wire 1 (# y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[15] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 +# cin $end
$var wire 2 ,# operation [1:0] $end
$var wire 1 -# src1 $end
$var wire 1 .# src2 $end
$var wire 1 /# sum $end
$var wire 1 0# cout $end
$var reg 1 1# A $end
$var reg 1 2# A_bar $end
$var reg 1 3# B $end
$var reg 1 4# B_bar $end
$var reg 1 5# result $end
$scope module M1 $end
$var wire 1 +# cin $end
$var wire 1 0# cout $end
$var wire 1 /# sum $end
$var wire 1 1# x $end
$var wire 1 3# y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[16] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 6# cin $end
$var wire 2 7# operation [1:0] $end
$var wire 1 8# src1 $end
$var wire 1 9# src2 $end
$var wire 1 :# sum $end
$var wire 1 ;# cout $end
$var reg 1 <# A $end
$var reg 1 =# A_bar $end
$var reg 1 ># B $end
$var reg 1 ?# B_bar $end
$var reg 1 @# result $end
$scope module M1 $end
$var wire 1 6# cin $end
$var wire 1 ;# cout $end
$var wire 1 :# sum $end
$var wire 1 <# x $end
$var wire 1 ># y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[17] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 A# cin $end
$var wire 2 B# operation [1:0] $end
$var wire 1 C# src1 $end
$var wire 1 D# src2 $end
$var wire 1 E# sum $end
$var wire 1 F# cout $end
$var reg 1 G# A $end
$var reg 1 H# A_bar $end
$var reg 1 I# B $end
$var reg 1 J# B_bar $end
$var reg 1 K# result $end
$scope module M1 $end
$var wire 1 A# cin $end
$var wire 1 F# cout $end
$var wire 1 E# sum $end
$var wire 1 G# x $end
$var wire 1 I# y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[18] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 L# cin $end
$var wire 2 M# operation [1:0] $end
$var wire 1 N# src1 $end
$var wire 1 O# src2 $end
$var wire 1 P# sum $end
$var wire 1 Q# cout $end
$var reg 1 R# A $end
$var reg 1 S# A_bar $end
$var reg 1 T# B $end
$var reg 1 U# B_bar $end
$var reg 1 V# result $end
$scope module M1 $end
$var wire 1 L# cin $end
$var wire 1 Q# cout $end
$var wire 1 P# sum $end
$var wire 1 R# x $end
$var wire 1 T# y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[19] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 W# cin $end
$var wire 2 X# operation [1:0] $end
$var wire 1 Y# src1 $end
$var wire 1 Z# src2 $end
$var wire 1 [# sum $end
$var wire 1 \# cout $end
$var reg 1 ]# A $end
$var reg 1 ^# A_bar $end
$var reg 1 _# B $end
$var reg 1 `# B_bar $end
$var reg 1 a# result $end
$scope module M1 $end
$var wire 1 W# cin $end
$var wire 1 \# cout $end
$var wire 1 [# sum $end
$var wire 1 ]# x $end
$var wire 1 _# y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[20] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 b# cin $end
$var wire 2 c# operation [1:0] $end
$var wire 1 d# src1 $end
$var wire 1 e# src2 $end
$var wire 1 f# sum $end
$var wire 1 g# cout $end
$var reg 1 h# A $end
$var reg 1 i# A_bar $end
$var reg 1 j# B $end
$var reg 1 k# B_bar $end
$var reg 1 l# result $end
$scope module M1 $end
$var wire 1 b# cin $end
$var wire 1 g# cout $end
$var wire 1 f# sum $end
$var wire 1 h# x $end
$var wire 1 j# y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[21] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 m# cin $end
$var wire 2 n# operation [1:0] $end
$var wire 1 o# src1 $end
$var wire 1 p# src2 $end
$var wire 1 q# sum $end
$var wire 1 r# cout $end
$var reg 1 s# A $end
$var reg 1 t# A_bar $end
$var reg 1 u# B $end
$var reg 1 v# B_bar $end
$var reg 1 w# result $end
$scope module M1 $end
$var wire 1 m# cin $end
$var wire 1 r# cout $end
$var wire 1 q# sum $end
$var wire 1 s# x $end
$var wire 1 u# y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[22] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 x# cin $end
$var wire 2 y# operation [1:0] $end
$var wire 1 z# src1 $end
$var wire 1 {# src2 $end
$var wire 1 |# sum $end
$var wire 1 }# cout $end
$var reg 1 ~# A $end
$var reg 1 !$ A_bar $end
$var reg 1 "$ B $end
$var reg 1 #$ B_bar $end
$var reg 1 $$ result $end
$scope module M1 $end
$var wire 1 x# cin $end
$var wire 1 }# cout $end
$var wire 1 |# sum $end
$var wire 1 ~# x $end
$var wire 1 "$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[23] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 %$ cin $end
$var wire 2 &$ operation [1:0] $end
$var wire 1 '$ src1 $end
$var wire 1 ($ src2 $end
$var wire 1 )$ sum $end
$var wire 1 *$ cout $end
$var reg 1 +$ A $end
$var reg 1 ,$ A_bar $end
$var reg 1 -$ B $end
$var reg 1 .$ B_bar $end
$var reg 1 /$ result $end
$scope module M1 $end
$var wire 1 %$ cin $end
$var wire 1 *$ cout $end
$var wire 1 )$ sum $end
$var wire 1 +$ x $end
$var wire 1 -$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[24] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 0$ cin $end
$var wire 2 1$ operation [1:0] $end
$var wire 1 2$ src1 $end
$var wire 1 3$ src2 $end
$var wire 1 4$ sum $end
$var wire 1 5$ cout $end
$var reg 1 6$ A $end
$var reg 1 7$ A_bar $end
$var reg 1 8$ B $end
$var reg 1 9$ B_bar $end
$var reg 1 :$ result $end
$scope module M1 $end
$var wire 1 0$ cin $end
$var wire 1 5$ cout $end
$var wire 1 4$ sum $end
$var wire 1 6$ x $end
$var wire 1 8$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[25] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 ;$ cin $end
$var wire 2 <$ operation [1:0] $end
$var wire 1 =$ src1 $end
$var wire 1 >$ src2 $end
$var wire 1 ?$ sum $end
$var wire 1 @$ cout $end
$var reg 1 A$ A $end
$var reg 1 B$ A_bar $end
$var reg 1 C$ B $end
$var reg 1 D$ B_bar $end
$var reg 1 E$ result $end
$scope module M1 $end
$var wire 1 ;$ cin $end
$var wire 1 @$ cout $end
$var wire 1 ?$ sum $end
$var wire 1 A$ x $end
$var wire 1 C$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[26] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 F$ cin $end
$var wire 2 G$ operation [1:0] $end
$var wire 1 H$ src1 $end
$var wire 1 I$ src2 $end
$var wire 1 J$ sum $end
$var wire 1 K$ cout $end
$var reg 1 L$ A $end
$var reg 1 M$ A_bar $end
$var reg 1 N$ B $end
$var reg 1 O$ B_bar $end
$var reg 1 P$ result $end
$scope module M1 $end
$var wire 1 F$ cin $end
$var wire 1 K$ cout $end
$var wire 1 J$ sum $end
$var wire 1 L$ x $end
$var wire 1 N$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[27] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 Q$ cin $end
$var wire 2 R$ operation [1:0] $end
$var wire 1 S$ src1 $end
$var wire 1 T$ src2 $end
$var wire 1 U$ sum $end
$var wire 1 V$ cout $end
$var reg 1 W$ A $end
$var reg 1 X$ A_bar $end
$var reg 1 Y$ B $end
$var reg 1 Z$ B_bar $end
$var reg 1 [$ result $end
$scope module M1 $end
$var wire 1 Q$ cin $end
$var wire 1 V$ cout $end
$var wire 1 U$ sum $end
$var wire 1 W$ x $end
$var wire 1 Y$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[28] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 \$ cin $end
$var wire 2 ]$ operation [1:0] $end
$var wire 1 ^$ src1 $end
$var wire 1 _$ src2 $end
$var wire 1 `$ sum $end
$var wire 1 a$ cout $end
$var reg 1 b$ A $end
$var reg 1 c$ A_bar $end
$var reg 1 d$ B $end
$var reg 1 e$ B_bar $end
$var reg 1 f$ result $end
$scope module M1 $end
$var wire 1 \$ cin $end
$var wire 1 a$ cout $end
$var wire 1 `$ sum $end
$var wire 1 b$ x $end
$var wire 1 d$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[29] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 g$ cin $end
$var wire 2 h$ operation [1:0] $end
$var wire 1 i$ src1 $end
$var wire 1 j$ src2 $end
$var wire 1 k$ sum $end
$var wire 1 l$ cout $end
$var reg 1 m$ A $end
$var reg 1 n$ A_bar $end
$var reg 1 o$ B $end
$var reg 1 p$ B_bar $end
$var reg 1 q$ result $end
$scope module M1 $end
$var wire 1 g$ cin $end
$var wire 1 l$ cout $end
$var wire 1 k$ sum $end
$var wire 1 m$ x $end
$var wire 1 o$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[30] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 r$ cin $end
$var wire 2 s$ operation [1:0] $end
$var wire 1 t$ src1 $end
$var wire 1 u$ src2 $end
$var wire 1 v$ sum $end
$var wire 1 w$ cout $end
$var reg 1 x$ A $end
$var reg 1 y$ A_bar $end
$var reg 1 z$ B $end
$var reg 1 {$ B_bar $end
$var reg 1 |$ result $end
$scope module M1 $end
$var wire 1 r$ cin $end
$var wire 1 w$ cout $end
$var wire 1 v$ sum $end
$var wire 1 x$ x $end
$var wire 1 z$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_loop[31] $end
$scope module Alu_unit $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 }$ cin $end
$var wire 2 ~$ operation [1:0] $end
$var wire 1 !% src1 $end
$var wire 1 "% src2 $end
$var wire 1 #% sum $end
$var wire 1 $% cout $end
$var reg 1 %% A $end
$var reg 1 &% A_bar $end
$var reg 1 '% B $end
$var reg 1 (% B_bar $end
$var reg 1 )% result $end
$scope module M1 $end
$var wire 1 }$ cin $end
$var wire 1 $% cout $end
$var wire 1 #% sum $end
$var wire 1 %% x $end
$var wire 1 '% y $end
$upscope $end
$upscope $end
$upscope $end
$scope module AluTop $end
$var wire 1 F A_invert $end
$var wire 1 G B_invert $end
$var wire 1 I cin $end
$var wire 1 J less $end
$var wire 2 *% operation [1:0] $end
$var wire 1 +% src1 $end
$var wire 1 ,% src2 $end
$var wire 1 -% sum $end
$var wire 1 .% cout $end
$var reg 1 /% A $end
$var reg 1 0% A_bar $end
$var reg 1 1% B $end
$var reg 1 2% B_bar $end
$var reg 1 3% result $end
$scope module M1 $end
$var wire 1 I cin $end
$var wire 1 .% cout $end
$var wire 1 -% sum $end
$var wire 1 /% x $end
$var wire 1 1% y $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder1 $end
$var wire 32 4% src2_i [31:0] $end
$var wire 32 5% sum_o [31:0] $end
$var wire 32 6% src1_i [31:0] $end
$var wire 33 7% carry [32:0] $end
$scope begin gen_loop[0] $end
$scope module fulladd $end
$var wire 1 8% cin $end
$var wire 1 9% cout $end
$var wire 1 :% sum $end
$var wire 1 ;% x $end
$var wire 1 <% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[1] $end
$scope module fulladd $end
$var wire 1 =% cin $end
$var wire 1 >% cout $end
$var wire 1 ?% sum $end
$var wire 1 @% x $end
$var wire 1 A% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[2] $end
$scope module fulladd $end
$var wire 1 B% cin $end
$var wire 1 C% cout $end
$var wire 1 D% sum $end
$var wire 1 E% x $end
$var wire 1 F% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[3] $end
$scope module fulladd $end
$var wire 1 G% cin $end
$var wire 1 H% cout $end
$var wire 1 I% sum $end
$var wire 1 J% x $end
$var wire 1 K% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[4] $end
$scope module fulladd $end
$var wire 1 L% cin $end
$var wire 1 M% cout $end
$var wire 1 N% sum $end
$var wire 1 O% x $end
$var wire 1 P% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[5] $end
$scope module fulladd $end
$var wire 1 Q% cin $end
$var wire 1 R% cout $end
$var wire 1 S% sum $end
$var wire 1 T% x $end
$var wire 1 U% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[6] $end
$scope module fulladd $end
$var wire 1 V% cin $end
$var wire 1 W% cout $end
$var wire 1 X% sum $end
$var wire 1 Y% x $end
$var wire 1 Z% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[7] $end
$scope module fulladd $end
$var wire 1 [% cin $end
$var wire 1 \% cout $end
$var wire 1 ]% sum $end
$var wire 1 ^% x $end
$var wire 1 _% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[8] $end
$scope module fulladd $end
$var wire 1 `% cin $end
$var wire 1 a% cout $end
$var wire 1 b% sum $end
$var wire 1 c% x $end
$var wire 1 d% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[9] $end
$scope module fulladd $end
$var wire 1 e% cin $end
$var wire 1 f% cout $end
$var wire 1 g% sum $end
$var wire 1 h% x $end
$var wire 1 i% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[10] $end
$scope module fulladd $end
$var wire 1 j% cin $end
$var wire 1 k% cout $end
$var wire 1 l% sum $end
$var wire 1 m% x $end
$var wire 1 n% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[11] $end
$scope module fulladd $end
$var wire 1 o% cin $end
$var wire 1 p% cout $end
$var wire 1 q% sum $end
$var wire 1 r% x $end
$var wire 1 s% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[12] $end
$scope module fulladd $end
$var wire 1 t% cin $end
$var wire 1 u% cout $end
$var wire 1 v% sum $end
$var wire 1 w% x $end
$var wire 1 x% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[13] $end
$scope module fulladd $end
$var wire 1 y% cin $end
$var wire 1 z% cout $end
$var wire 1 {% sum $end
$var wire 1 |% x $end
$var wire 1 }% y $end
$upscope $end
$upscope $end
$scope begin gen_loop[14] $end
$scope module fulladd $end
$var wire 1 ~% cin $end
$var wire 1 !& cout $end
$var wire 1 "& sum $end
$var wire 1 #& x $end
$var wire 1 $& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[15] $end
$scope module fulladd $end
$var wire 1 %& cin $end
$var wire 1 && cout $end
$var wire 1 '& sum $end
$var wire 1 (& x $end
$var wire 1 )& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[16] $end
$scope module fulladd $end
$var wire 1 *& cin $end
$var wire 1 +& cout $end
$var wire 1 ,& sum $end
$var wire 1 -& x $end
$var wire 1 .& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[17] $end
$scope module fulladd $end
$var wire 1 /& cin $end
$var wire 1 0& cout $end
$var wire 1 1& sum $end
$var wire 1 2& x $end
$var wire 1 3& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[18] $end
$scope module fulladd $end
$var wire 1 4& cin $end
$var wire 1 5& cout $end
$var wire 1 6& sum $end
$var wire 1 7& x $end
$var wire 1 8& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[19] $end
$scope module fulladd $end
$var wire 1 9& cin $end
$var wire 1 :& cout $end
$var wire 1 ;& sum $end
$var wire 1 <& x $end
$var wire 1 =& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[20] $end
$scope module fulladd $end
$var wire 1 >& cin $end
$var wire 1 ?& cout $end
$var wire 1 @& sum $end
$var wire 1 A& x $end
$var wire 1 B& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[21] $end
$scope module fulladd $end
$var wire 1 C& cin $end
$var wire 1 D& cout $end
$var wire 1 E& sum $end
$var wire 1 F& x $end
$var wire 1 G& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[22] $end
$scope module fulladd $end
$var wire 1 H& cin $end
$var wire 1 I& cout $end
$var wire 1 J& sum $end
$var wire 1 K& x $end
$var wire 1 L& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[23] $end
$scope module fulladd $end
$var wire 1 M& cin $end
$var wire 1 N& cout $end
$var wire 1 O& sum $end
$var wire 1 P& x $end
$var wire 1 Q& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[24] $end
$scope module fulladd $end
$var wire 1 R& cin $end
$var wire 1 S& cout $end
$var wire 1 T& sum $end
$var wire 1 U& x $end
$var wire 1 V& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[25] $end
$scope module fulladd $end
$var wire 1 W& cin $end
$var wire 1 X& cout $end
$var wire 1 Y& sum $end
$var wire 1 Z& x $end
$var wire 1 [& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[26] $end
$scope module fulladd $end
$var wire 1 \& cin $end
$var wire 1 ]& cout $end
$var wire 1 ^& sum $end
$var wire 1 _& x $end
$var wire 1 `& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[27] $end
$scope module fulladd $end
$var wire 1 a& cin $end
$var wire 1 b& cout $end
$var wire 1 c& sum $end
$var wire 1 d& x $end
$var wire 1 e& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[28] $end
$scope module fulladd $end
$var wire 1 f& cin $end
$var wire 1 g& cout $end
$var wire 1 h& sum $end
$var wire 1 i& x $end
$var wire 1 j& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[29] $end
$scope module fulladd $end
$var wire 1 k& cin $end
$var wire 1 l& cout $end
$var wire 1 m& sum $end
$var wire 1 n& x $end
$var wire 1 o& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[30] $end
$scope module fulladd $end
$var wire 1 p& cin $end
$var wire 1 q& cout $end
$var wire 1 r& sum $end
$var wire 1 s& x $end
$var wire 1 t& y $end
$upscope $end
$upscope $end
$scope begin gen_loop[31] $end
$scope module fulladd $end
$var wire 1 u& cin $end
$var wire 1 v& cout $end
$var wire 1 w& sum $end
$var wire 1 x& x $end
$var wire 1 y& y $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder2 $end
$var wire 32 z& src1_i [31:0] $end
$var wire 32 {& sum_o [31:0] $end
$var wire 32 |& src2_i [31:0] $end
$var wire 33 }& carry [32:0] $end
$scope begin gen_loop[0] $end
$scope module fulladd $end
$var wire 1 ~& cin $end
$var wire 1 !' cout $end
$var wire 1 "' sum $end
$var wire 1 #' x $end
$var wire 1 $' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[1] $end
$scope module fulladd $end
$var wire 1 %' cin $end
$var wire 1 &' cout $end
$var wire 1 '' sum $end
$var wire 1 (' x $end
$var wire 1 )' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[2] $end
$scope module fulladd $end
$var wire 1 *' cin $end
$var wire 1 +' cout $end
$var wire 1 ,' sum $end
$var wire 1 -' x $end
$var wire 1 .' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[3] $end
$scope module fulladd $end
$var wire 1 /' cin $end
$var wire 1 0' cout $end
$var wire 1 1' sum $end
$var wire 1 2' x $end
$var wire 1 3' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[4] $end
$scope module fulladd $end
$var wire 1 4' cin $end
$var wire 1 5' cout $end
$var wire 1 6' sum $end
$var wire 1 7' x $end
$var wire 1 8' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[5] $end
$scope module fulladd $end
$var wire 1 9' cin $end
$var wire 1 :' cout $end
$var wire 1 ;' sum $end
$var wire 1 <' x $end
$var wire 1 =' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[6] $end
$scope module fulladd $end
$var wire 1 >' cin $end
$var wire 1 ?' cout $end
$var wire 1 @' sum $end
$var wire 1 A' x $end
$var wire 1 B' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[7] $end
$scope module fulladd $end
$var wire 1 C' cin $end
$var wire 1 D' cout $end
$var wire 1 E' sum $end
$var wire 1 F' x $end
$var wire 1 G' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[8] $end
$scope module fulladd $end
$var wire 1 H' cin $end
$var wire 1 I' cout $end
$var wire 1 J' sum $end
$var wire 1 K' x $end
$var wire 1 L' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[9] $end
$scope module fulladd $end
$var wire 1 M' cin $end
$var wire 1 N' cout $end
$var wire 1 O' sum $end
$var wire 1 P' x $end
$var wire 1 Q' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[10] $end
$scope module fulladd $end
$var wire 1 R' cin $end
$var wire 1 S' cout $end
$var wire 1 T' sum $end
$var wire 1 U' x $end
$var wire 1 V' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[11] $end
$scope module fulladd $end
$var wire 1 W' cin $end
$var wire 1 X' cout $end
$var wire 1 Y' sum $end
$var wire 1 Z' x $end
$var wire 1 [' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[12] $end
$scope module fulladd $end
$var wire 1 \' cin $end
$var wire 1 ]' cout $end
$var wire 1 ^' sum $end
$var wire 1 _' x $end
$var wire 1 `' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[13] $end
$scope module fulladd $end
$var wire 1 a' cin $end
$var wire 1 b' cout $end
$var wire 1 c' sum $end
$var wire 1 d' x $end
$var wire 1 e' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[14] $end
$scope module fulladd $end
$var wire 1 f' cin $end
$var wire 1 g' cout $end
$var wire 1 h' sum $end
$var wire 1 i' x $end
$var wire 1 j' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[15] $end
$scope module fulladd $end
$var wire 1 k' cin $end
$var wire 1 l' cout $end
$var wire 1 m' sum $end
$var wire 1 n' x $end
$var wire 1 o' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[16] $end
$scope module fulladd $end
$var wire 1 p' cin $end
$var wire 1 q' cout $end
$var wire 1 r' sum $end
$var wire 1 s' x $end
$var wire 1 t' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[17] $end
$scope module fulladd $end
$var wire 1 u' cin $end
$var wire 1 v' cout $end
$var wire 1 w' sum $end
$var wire 1 x' x $end
$var wire 1 y' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[18] $end
$scope module fulladd $end
$var wire 1 z' cin $end
$var wire 1 {' cout $end
$var wire 1 |' sum $end
$var wire 1 }' x $end
$var wire 1 ~' y $end
$upscope $end
$upscope $end
$scope begin gen_loop[19] $end
$scope module fulladd $end
$var wire 1 !( cin $end
$var wire 1 "( cout $end
$var wire 1 #( sum $end
$var wire 1 $( x $end
$var wire 1 %( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[20] $end
$scope module fulladd $end
$var wire 1 &( cin $end
$var wire 1 '( cout $end
$var wire 1 (( sum $end
$var wire 1 )( x $end
$var wire 1 *( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[21] $end
$scope module fulladd $end
$var wire 1 +( cin $end
$var wire 1 ,( cout $end
$var wire 1 -( sum $end
$var wire 1 .( x $end
$var wire 1 /( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[22] $end
$scope module fulladd $end
$var wire 1 0( cin $end
$var wire 1 1( cout $end
$var wire 1 2( sum $end
$var wire 1 3( x $end
$var wire 1 4( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[23] $end
$scope module fulladd $end
$var wire 1 5( cin $end
$var wire 1 6( cout $end
$var wire 1 7( sum $end
$var wire 1 8( x $end
$var wire 1 9( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[24] $end
$scope module fulladd $end
$var wire 1 :( cin $end
$var wire 1 ;( cout $end
$var wire 1 <( sum $end
$var wire 1 =( x $end
$var wire 1 >( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[25] $end
$scope module fulladd $end
$var wire 1 ?( cin $end
$var wire 1 @( cout $end
$var wire 1 A( sum $end
$var wire 1 B( x $end
$var wire 1 C( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[26] $end
$scope module fulladd $end
$var wire 1 D( cin $end
$var wire 1 E( cout $end
$var wire 1 F( sum $end
$var wire 1 G( x $end
$var wire 1 H( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[27] $end
$scope module fulladd $end
$var wire 1 I( cin $end
$var wire 1 J( cout $end
$var wire 1 K( sum $end
$var wire 1 L( x $end
$var wire 1 M( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[28] $end
$scope module fulladd $end
$var wire 1 N( cin $end
$var wire 1 O( cout $end
$var wire 1 P( sum $end
$var wire 1 Q( x $end
$var wire 1 R( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[29] $end
$scope module fulladd $end
$var wire 1 S( cin $end
$var wire 1 T( cout $end
$var wire 1 U( sum $end
$var wire 1 V( x $end
$var wire 1 W( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[30] $end
$scope module fulladd $end
$var wire 1 X( cin $end
$var wire 1 Y( cout $end
$var wire 1 Z( sum $end
$var wire 1 [( x $end
$var wire 1 \( y $end
$upscope $end
$upscope $end
$scope begin gen_loop[31] $end
$scope module fulladd $end
$var wire 1 ]( cin $end
$var wire 1 ^( cout $end
$var wire 1 _( sum $end
$var wire 1 `( x $end
$var wire 1 a( y $end
$upscope $end
$upscope $end
$upscope $end
$scope module Decoder $end
$var wire 6 b( instr_op_i [5:0] $end
$var reg 1 : ALUSrc_o $end
$var reg 3 c( ALU_op_o [2:0] $end
$var reg 1 / Branch_o $end
$var reg 1 + Extend_mux $end
$var reg 1 5 RegDst_o $end
$var reg 1 4 RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 d( pc_addr_i [31:0] $end
$var reg 32 e( instr_o [31:0] $end
$var integer 32 f( i [31:0] $end
$upscope $end
$scope module MUX_bne_beq $end
$var wire 1 g( data0_i $end
$var wire 1 # data1_i $end
$var wire 1 h( select_i $end
$var reg 1 . data_o $end
$upscope $end
$scope module MUX_result_Src $end
$var wire 32 i( data0_i [31:0] $end
$var wire 1 j( select_i $end
$var wire 32 k( data1_i [31:0] $end
$var reg 32 l( data_o [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 1 : select_i $end
$var wire 32 m( data1_i [31:0] $end
$var wire 32 n( data0_i [31:0] $end
$var reg 32 o( data_o [31:0] $end
$upscope $end
$scope module Mux_Extend $end
$var wire 1 + select_i $end
$var wire 32 p( data1_i [31:0] $end
$var wire 32 q( data0_i [31:0] $end
$var reg 32 r( data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Src $end
$var wire 32 s( data0_i [31:0] $end
$var wire 32 t( data1_i [31:0] $end
$var wire 1 u( select_i $end
$var reg 32 v( data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 w( data0_i [4:0] $end
$var wire 5 x( data1_i [4:0] $end
$var wire 1 5 select_i $end
$var reg 5 y( data_o [4:0] $end
$upscope $end
$scope module Mux_shamt_src $end
$var wire 32 z( data0_i [31:0] $end
$var wire 1 {( select_i $end
$var wire 32 |( data1_i [31:0] $end
$var reg 32 }( data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 ~( pc_in_i [31:0] $end
$var wire 1 " rst_i $end
$var reg 32 !) pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 ") RDaddr_i [4:0] $end
$var wire 32 #) RDdata_i [31:0] $end
$var wire 5 $) RSaddr_i [4:0] $end
$var wire 32 %) RSdata_o [31:0] $end
$var wire 5 &) RTaddr_i [4:0] $end
$var wire 32 ') RTdata_o [31:0] $end
$var wire 1 4 RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$upscope $end
$scope module SE $end
$var wire 16 () data_i [15:0] $end
$var reg 32 )) data_o [31:0] $end
$upscope $end
$scope module Shifter01 $end
$var wire 32 *) data_i [31:0] $end
$var wire 32 +) data_o [31:0] $end
$upscope $end
$scope module Shifter02 $end
$var wire 4 ,) ALUCtrl_i [3:0] $end
$var wire 32 -) src1_i [31:0] $end
$var wire 32 .) src2_i [31:0] $end
$var reg 32 /) data_o [31:0] $end
$upscope $end
$scope module Zf $end
$var wire 16 0) data_i [15:0] $end
$var wire 32 1) data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxxxxxxxxxxxxxx 1)
bx 0)
b0 /)
b0xxxxx .)
bx -)
bx ,)
bx00 +)
bx *)
bx ))
bx ()
bx ')
bx &)
bx %)
bx $)
bx #)
bx ")
bx !)
b0 ~(
b0xxxxx }(
bx |(
x{(
b0xxxxx z(
bx y(
bx x(
bx w(
bx v(
xu(
bx t(
bx s(
bx r(
bx q(
b0xxxxxxxxxxxxxxxx p(
bx o(
bx n(
bx m(
bx l(
b0 k(
xj(
bx i(
xh(
xg(
b100000 f(
bx e(
bx d(
bx c(
bx b(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
0*'
0)'
x('
x''
0&'
0%'
0$'
x#'
x"'
0!'
0~&
bx000 }&
bx00 |&
bx {&
bx z&
0y&
xx&
xw&
xv&
xu&
0t&
xs&
xr&
xq&
xp&
0o&
xn&
xm&
xl&
xk&
0j&
xi&
xh&
xg&
xf&
0e&
xd&
xc&
xb&
xa&
0`&
x_&
x^&
x]&
x\&
0[&
xZ&
xY&
xX&
xW&
0V&
xU&
xT&
xS&
xR&
0Q&
xP&
xO&
xN&
xM&
0L&
xK&
xJ&
xI&
xH&
0G&
xF&
xE&
xD&
xC&
0B&
xA&
x@&
x?&
x>&
0=&
x<&
x;&
x:&
x9&
08&
x7&
x6&
x5&
x4&
03&
x2&
x1&
x0&
x/&
0.&
x-&
x,&
x+&
x*&
0)&
x(&
x'&
x&&
x%&
0$&
x#&
x"&
x!&
x~%
0}%
x|%
x{%
xz%
xy%
0x%
xw%
xv%
xu%
xt%
0s%
xr%
xq%
xp%
xo%
0n%
xm%
xl%
xk%
xj%
0i%
xh%
xg%
xf%
xe%
0d%
xc%
xb%
xa%
x`%
0_%
x^%
x]%
x\%
x[%
0Z%
xY%
xX%
xW%
xV%
0U%
xT%
xS%
xR%
xQ%
0P%
xO%
xN%
xM%
xL%
0K%
xJ%
xI%
xH%
xG%
1F%
xE%
xD%
xC%
0B%
0A%
x@%
x?%
0>%
0=%
0<%
x;%
x:%
09%
08%
bx000 7%
bx 6%
bx 5%
b100 4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
bx *%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
bx ~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
bx s$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
bx h$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
bx ]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
bx R$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
bx G$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
bx <$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
bx 1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
bx &$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
bx y#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
bx n#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
bx c#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
bx X#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
bx M#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
bx B#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
bx 7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
bx ,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
bx !#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
bx t"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
bx i"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
bx ^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
bx S"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
bx H"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
bx ="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
bx 2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
bx '"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
x|
x{
bx z
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
bx o
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
bx d
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
bx Y
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
bx N
xM
bx L
bx K
xJ
xI
xH
xG
xF
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
b0 =
bx <
bx ;
x:
bx 9
bx 8
bx 7
bx 6
x5
x4
bx 3
bx 2
b0xxxxxxxxxxxxxxxx 1
bx 0
x/
x.
bx -
bx ,
x+
bx00 *
bx )
bx (
bx '
bx &
b0xxxxx %
b0 $
x#
0"
0!
$end
#5000
1u(
1.
1g(
0#
1H
b1 &
b1 l(
b1 #)
13%
0J
0Q
1M
1.%
1-%
b1 9
b1 L
b1 i(
b1000 =
b1000 ~(
11%
1/%
12%
11'
0_(
0Z(
0U(
0P(
0K(
0F(
0A(
0<(
07(
02(
0-(
0((
0#(
0|'
0w'
0r'
0m'
0h'
0c'
0^'
0Y'
0T'
0O'
0J'
0E'
0@'
0;'
06'
1/'
0\
0g
0r
0}
0*"
05"
0@"
0K"
0V"
0a"
0l"
0w"
0$#
0/#
0:#
0E#
0P#
0[#
0f#
0q#
0|#
0)$
04$
0?$
0J$
0U$
0`$
0k$
0v$
0#%
0](
0X(
0S(
0N(
0I(
0D(
0?(
0:(
05(
00(
0+(
0&(
0!(
0z'
0u'
0p'
0k'
0f'
0a'
0\'
0W'
0R'
0M'
0H'
0C'
0>'
09'
04'
1+'
1X
1c
1n
1y
1&"
11"
1<"
1G"
1R"
1]"
1h"
1s"
1~"
1+#
16#
1A#
1L#
1W#
1b#
1m#
1x#
1%$
10$
1;$
1F$
1Q$
1\$
1g$
1r$
1}$
0^(
0Y(
0T(
0O(
0J(
0E(
0@(
0;(
06(
01(
0,(
0'(
0"(
0{'
0v'
0q'
0l'
0g'
0b'
0]'
0X'
0S'
0N'
0I'
0D'
0?'
0:'
05'
b1000 }&
00'
0,'
1R
1]
1h
1s
1~
1+"
16"
1A"
1L"
1W"
1b"
1m"
1x"
1%#
10#
1;#
1F#
1Q#
1\#
1g#
1r#
1}#
1*$
15$
1@$
1K$
1V$
1a$
1l$
1w$
b11111111111111111111111111111111 E
1$%
0a(
0\(
0W(
0R(
0M(
0H(
0C(
0>(
09(
04(
0/(
0*(
0%(
0~'
0y'
0t'
0o'
0j'
0e'
0`'
0['
0V'
0Q'
0L'
0G'
0B'
0='
08'
03'
1.'
0W
1U
0S
1V
0b
1`
0^
1a
0m
1k
0i
1l
0x
1v
0t
1w
0%"
1#"
0!"
1$"
00"
1."
0,"
1/"
0;"
19"
07"
1:"
0F"
1D"
0B"
1E"
0Q"
1O"
0M"
1P"
0\"
1Z"
0X"
1["
0g"
1e"
0c"
1f"
0r"
1p"
0n"
1q"
0}"
1{"
0y"
1|"
0*#
1(#
0&#
1)#
05#
13#
01#
14#
0@#
1>#
0<#
1?#
0K#
1I#
0G#
1J#
0V#
1T#
0R#
1U#
0a#
1_#
0]#
1`#
0l#
1j#
0h#
1k#
0w#
1u#
0s#
1v#
0$$
1"$
0~#
1#$
0/$
1-$
0+$
1.$
0:$
18$
06$
19$
0E$
1C$
0A$
1D$
0P$
1N$
0L$
1O$
0[$
1Y$
0W$
1Z$
0f$
1d$
0b$
1e$
0q$
1o$
0m$
1p$
0|$
1z$
0x$
1{$
b1 D
0)%
1'%
0%%
1(%
b100 *
b100 |&
b100 +)
0h(
0,%
0"%
0u$
0j$
0_$
0T$
0I$
0>$
03$
0($
0{#
0p#
0e#
0Z#
0O#
0D#
09#
0.#
0##
0v"
0k"
0`"
0U"
0J"
0?"
04"
0)"
0|
0q
0f
0[
0P
b1000 -
b1000 v(
b10 K
b10 N
b10 Y
b10 d
b10 o
b10 z
b10 '"
b10 2"
b10 ="
b10 H"
b10 S"
b10 ^"
b10 i"
b10 t"
b10 !#
b10 ,#
b10 7#
b10 B#
b10 M#
b10 X#
b10 c#
b10 n#
b10 y#
b10 &$
b10 1$
b10 <$
b10 G$
b10 R$
b10 ]$
b10 h$
b10 s$
b10 ~$
b10 *%
1G
0F
1I
00%
b0 6
b0 y(
b0 ")
b1 ,
b1 m(
b1 r(
b1 *)
b110 ;
b110 ?
b110 c(
b0 3
b0 B
b0 o(
b0 -)
b0 %
b0 }(
b0 .)
0`(
0[(
0V(
0Q(
0L(
0G(
0B(
0=(
08(
03(
0.(
0)(
0$(
0}'
0x'
0s'
0n'
0i'
0d'
0_'
0Z'
0U'
0P'
0K'
0F'
0A'
0<'
07'
02'
0w&
0r&
0m&
0h&
0c&
0^&
0Y&
0T&
0O&
0J&
0E&
0@&
0;&
06&
01&
0,&
0'&
0"&
0{%
0v%
0q%
0l%
0g%
0b%
0]%
0X%
0S%
0N%
0I%
0''
b1000 0
b1000 {&
b1000 t(
0"'
0u&
0p&
0k&
0f&
0a&
0\&
0W&
0R&
0M&
0H&
0C&
0>&
09&
04&
0/&
0*&
0%&
0~%
0y%
0t%
0o%
0j%
0e%
0`%
0[%
0V%
0Q%
0L%
0G%
0v&
0q&
0l&
0g&
0b&
0]&
0X&
0S&
0N&
0I&
0D&
0?&
0:&
05&
00&
0+&
0&&
0!&
0z%
0u%
0p%
0k%
0f%
0a%
0\%
0W%
0R%
0M%
0H%
1-'
b0 7%
0C%
0('
0#'
0{(
0j(
1&%
1y$
1n$
1c$
1X$
1M$
1B$
17$
1,$
1!$
1t#
1i#
1^#
1S#
1H#
1=#
12#
1'#
1z"
1o"
1d"
1Y"
1N"
1C"
18"
1-"
1""
1u
1j
1_
1T
1D%
0?%
b100 (
b100 5%
b100 z&
b100 s(
0:%
b1 2
b1 q(
b1 ))
b110 <
b110 @
b110 A
b110 ,)
0+
1/
05
04
0:
1+%
0!%
0t$
0i$
0^$
0S$
0H$
0=$
02$
0'$
0z#
0o#
0d#
0Y#
0N#
0C#
08#
0-#
0"#
0u"
0j"
0_"
0T"
0I"
0>"
03"
0("
0{
0p
0e
0Z
0O
b0 x(
b0 w(
b0 z(
b1 1
b1 p(
b1 1)
b1 0)
b1 ()
b1 >
b101 b(
b0 7
b0 n(
b0 ')
b0 &)
b1 8
b1 C
b1 |(
b1 %)
b1 $)
0x&
0s&
0n&
0i&
0d&
0_&
0Z&
0U&
0P&
0K&
0F&
0A&
0<&
07&
02&
0-&
0(&
0#&
0|%
0w%
0r%
0m%
0h%
0c%
0^%
0Y%
0T%
0O%
0J%
0E%
0@%
0;%
b10100001000000000000000000001 )
b10100001000000000000000000001 e(
b0 '
b0 6%
b0 d(
b0 !)
1!
#10000
0!
1"
#15000
b10 %
b10 }(
b10 .)
b1 $
b1 k(
b1 /)
1{(
1j(
b1 &
b1 l(
b1 #)
b1100 =
b1100 ~(
03%
02%
1;'
19'
0n
0y
0&"
01"
0<"
0G"
0R"
0]"
0h"
0s"
0~"
0+#
06#
0A#
0L#
0W#
0b#
0m#
0x#
0%$
00$
0;$
0F$
0Q$
0\$
0g$
0r$
0}$
1m'
1h'
1c'
15'
1g
0h
0r
0s
0}
0~
0*"
0+"
05"
06"
0@"
0A"
0K"
0L"
0V"
0W"
0a"
0b"
0l"
0m"
0w"
0x"
0$#
0%#
0/#
00#
0:#
0;#
0E#
0F#
0P#
0Q#
0[#
0\#
0f#
0g#
0q#
0r#
0|#
0}#
0)$
0*$
04$
05$
0?$
0@$
0J$
0K$
0U$
0V$
0`$
0a$
0k$
0l$
0v$
0w$
0#%
0$%
0M
b110 E
0.%
1o'
1j'
1e'
18'
13'
0V
0a
0k
0v
0#"
0."
09"
0D"
0O"
0Z"
0e"
0p"
0{"
0(#
03#
0>#
0I#
0T#
0_#
0j#
0u#
0"$
0-$
08$
0C$
0N$
0Y$
0d$
0o$
0z$
0'%
b1110000000011100 *
b1110000000011100 |&
b1110000000011100 +)
1,%
1[
1P
b10 9
b10 L
b10 i(
b1100 -
b1100 v(
b0 K
b0 N
b0 Y
b0 d
b0 o
b0 z
b0 '"
b0 2"
b0 ="
b0 H"
b0 S"
b0 ^"
b0 i"
b0 t"
b0 !#
b0 ,#
b0 7#
b0 B#
b0 M#
b0 X#
b0 c#
b0 n#
b0 y#
b0 &$
b0 1$
b0 <$
b0 G$
b0 R$
b0 ]$
b0 h$
b0 s$
b0 ~$
b0 *%
0G
0I
0/%
10%
b111 6
b111 y(
b111 ")
b11100000000111 ,
b11100000000111 m(
b11100000000111 r(
b11100000000111 *)
b0 ;
b0 ?
b0 c(
b111 3
b111 B
b111 o(
b111 -)
06'
14'
b111000 }&
10'
b10 D
1W
b1110000000101000 0
b1110000000101000 {&
b1110000000101000 t(
11'
0Q
12'
0u(
1S
0T
b1100 (
b1100 5%
b1100 z&
b1100 s(
1I%
b11100000000111 2
b11100000000111 q(
b11100000000111 ))
b1111 <
b1111 @
b1111 A
b1111 ,)
0/
15
14
0+%
1O
b111 x(
b111 w(
b11100000000111 1
b11100000000111 p(
b11100000000111 1)
b11100000000111 0)
b11100000000111 ()
b111 >
b0 b(
b111 7
b111 n(
b111 ')
b111 &)
b10 8
b10 C
b10 |(
b10 %)
b10 $)
1J%
b10001110011100000000111 )
b10001110011100000000111 e(
b1000 '
b1000 6%
b1000 d(
b1000 !)
1!
#20000
0!
#25000
0.
0g(
1#
0-%
01%
12%
b10000 =
b10000 ~(
0H
0;'
09'
05'
0m'
0h'
0c'
16'
01'
0o'
0j'
0e'
08'
03'
0.'
0`
1a
0U
1V
b0 *
b0 |&
b0 +)
0,%
0[
0P
b0 &
b0 l(
b0 #)
b10000 -
b10000 v(
b0 9
b0 L
b0 i(
b0 6
b0 y(
b0 ")
b0 ,
b0 m(
b0 r(
b0 *)
b0 %
b0 }(
b0 .)
b0 3
b0 B
b0 o(
b0 -)
0g
04'
17'
0c
00'
1N%
0]
1L%
0\
0/'
1H%
0X
b0 }&
0+'
02'
b0 E
0R
b10000 0
b10000 {&
b10000 t(
0,'
0I%
0Q
1G%
0-'
b11000 7%
1C%
b0 $
b0 k(
b0 /)
0{(
0j(
b0 D
0W
0S
1T
b10000 (
b10000 5%
b10000 z&
b10000 s(
0D%
b0 2
b0 q(
b0 ))
b0 <
b0 @
b0 A
b0 ,)
0O
b0 x(
b0 w(
b0 1
b0 p(
b0 1)
b0 0)
b0 ()
b0 >
b0 &)
b0 8
b0 C
b0 |(
b0 %)
b0 $)
1E%
b0 )
b0 e(
b1100 '
b1100 6%
b1100 d(
b1100 !)
b0 7
b0 n(
b0 ')
1!
#30000
0!
#35000
b10100 =
b10100 ~(
b10100 -
b10100 v(
0;'
0<'
16'
0S%
01'
b10100 0
b10100 {&
b10100 t(
1,'
0Q%
0L%
0G%
17'
0M%
02'
0H%
1-'
b0 7%
0C%
1N%
0I%
b10100 (
b10100 5%
b10100 z&
b10100 s(
1D%
1O%
0J%
0E%
b10000 '
b10000 6%
b10000 d(
b10000 !)
1!
#40000
0!
#45000
b11000 =
b11000 ~(
b11000 -
b11000 v(
11'
12'
b11000 0
b11000 {&
b11000 t(
0,'
1I%
1G%
0-'
b1000 7%
1C%
b11000 (
b11000 5%
b11000 z&
b11000 s(
0D%
1E%
b10100 '
b10100 6%
b10100 d(
b10100 !)
1!
