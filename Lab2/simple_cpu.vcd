$date
	Sun May 10 21:59:58 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # zero $end
$var wire 32 $ shifter_out [31:0] $end
$var wire 32 % shamt [31:0] $end
$var wire 32 & result [31:0] $end
$var wire 32 ' now_address [31:0] $end
$var wire 32 ( next_address [31:0] $end
$var wire 32 ) instruction [31:0] $end
$var wire 32 * extend_shift_two [31:0] $end
$var wire 1 + extend_choose $end
$var wire 32 , extend [31:0] $end
$var wire 32 - current_program [31:0] $end
$var wire 1 . branch_judge $end
$var wire 1 / branch $end
$var wire 32 0 address_after_adder [31:0] $end
$var wire 32 1 ZeroExtend [31:0] $end
$var wire 32 2 SignExtend [31:0] $end
$var wire 32 3 RtALU [31:0] $end
$var wire 1 4 RegWrite $end
$var wire 1 5 RegDst $end
$var wire 5 6 RegDout [4:0] $end
$var wire 32 7 RT [31:0] $end
$var wire 32 8 RS [31:0] $end
$var wire 32 9 ALUoutput [31:0] $end
$var wire 1 : ALUSrc $end
$var wire 3 ; ALUOp [2:0] $end
$var wire 4 < ALUCtrl [3:0] $end
$var reg 32 = Reg_current_program [31:0] $end
$scope module AC $end
$var wire 6 > funct_i [5:0] $end
$var wire 3 ? ALUOp_i [2:0] $end
$var reg 4 @ ALUCtrl_o [3:0] $end
$upscope $end
$scope module ALU_unit $end
$var wire 4 A ctrl_i [3:0] $end
$var wire 32 B src2_i [31:0] $end
$var wire 32 C src1_i [31:0] $end
$var wire 3 D ALUOp_i [2:0] $end
$var reg 32 E result_o [31:0] $end
$var reg 1 # zero_o $end
$upscope $end
$scope module Adder1 $end
$var wire 32 F src2_i [31:0] $end
$var wire 32 G sum_o [31:0] $end
$var wire 32 H src1_i [31:0] $end
$var wire 33 I carry [32:0] $end
$scope begin gen_loop[0] $end
$scope module fulladd $end
$var wire 1 J cin $end
$var wire 1 K cout $end
$var wire 1 L sum $end
$var wire 1 M x $end
$var wire 1 N y $end
$upscope $end
$upscope $end
$scope begin gen_loop[1] $end
$scope module fulladd $end
$var wire 1 O cin $end
$var wire 1 P cout $end
$var wire 1 Q sum $end
$var wire 1 R x $end
$var wire 1 S y $end
$upscope $end
$upscope $end
$scope begin gen_loop[2] $end
$scope module fulladd $end
$var wire 1 T cin $end
$var wire 1 U cout $end
$var wire 1 V sum $end
$var wire 1 W x $end
$var wire 1 X y $end
$upscope $end
$upscope $end
$scope begin gen_loop[3] $end
$scope module fulladd $end
$var wire 1 Y cin $end
$var wire 1 Z cout $end
$var wire 1 [ sum $end
$var wire 1 \ x $end
$var wire 1 ] y $end
$upscope $end
$upscope $end
$scope begin gen_loop[4] $end
$scope module fulladd $end
$var wire 1 ^ cin $end
$var wire 1 _ cout $end
$var wire 1 ` sum $end
$var wire 1 a x $end
$var wire 1 b y $end
$upscope $end
$upscope $end
$scope begin gen_loop[5] $end
$scope module fulladd $end
$var wire 1 c cin $end
$var wire 1 d cout $end
$var wire 1 e sum $end
$var wire 1 f x $end
$var wire 1 g y $end
$upscope $end
$upscope $end
$scope begin gen_loop[6] $end
$scope module fulladd $end
$var wire 1 h cin $end
$var wire 1 i cout $end
$var wire 1 j sum $end
$var wire 1 k x $end
$var wire 1 l y $end
$upscope $end
$upscope $end
$scope begin gen_loop[7] $end
$scope module fulladd $end
$var wire 1 m cin $end
$var wire 1 n cout $end
$var wire 1 o sum $end
$var wire 1 p x $end
$var wire 1 q y $end
$upscope $end
$upscope $end
$scope begin gen_loop[8] $end
$scope module fulladd $end
$var wire 1 r cin $end
$var wire 1 s cout $end
$var wire 1 t sum $end
$var wire 1 u x $end
$var wire 1 v y $end
$upscope $end
$upscope $end
$scope begin gen_loop[9] $end
$scope module fulladd $end
$var wire 1 w cin $end
$var wire 1 x cout $end
$var wire 1 y sum $end
$var wire 1 z x $end
$var wire 1 { y $end
$upscope $end
$upscope $end
$scope begin gen_loop[10] $end
$scope module fulladd $end
$var wire 1 | cin $end
$var wire 1 } cout $end
$var wire 1 ~ sum $end
$var wire 1 !" x $end
$var wire 1 "" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[11] $end
$scope module fulladd $end
$var wire 1 #" cin $end
$var wire 1 $" cout $end
$var wire 1 %" sum $end
$var wire 1 &" x $end
$var wire 1 '" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[12] $end
$scope module fulladd $end
$var wire 1 (" cin $end
$var wire 1 )" cout $end
$var wire 1 *" sum $end
$var wire 1 +" x $end
$var wire 1 ," y $end
$upscope $end
$upscope $end
$scope begin gen_loop[13] $end
$scope module fulladd $end
$var wire 1 -" cin $end
$var wire 1 ." cout $end
$var wire 1 /" sum $end
$var wire 1 0" x $end
$var wire 1 1" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[14] $end
$scope module fulladd $end
$var wire 1 2" cin $end
$var wire 1 3" cout $end
$var wire 1 4" sum $end
$var wire 1 5" x $end
$var wire 1 6" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[15] $end
$scope module fulladd $end
$var wire 1 7" cin $end
$var wire 1 8" cout $end
$var wire 1 9" sum $end
$var wire 1 :" x $end
$var wire 1 ;" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[16] $end
$scope module fulladd $end
$var wire 1 <" cin $end
$var wire 1 =" cout $end
$var wire 1 >" sum $end
$var wire 1 ?" x $end
$var wire 1 @" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[17] $end
$scope module fulladd $end
$var wire 1 A" cin $end
$var wire 1 B" cout $end
$var wire 1 C" sum $end
$var wire 1 D" x $end
$var wire 1 E" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[18] $end
$scope module fulladd $end
$var wire 1 F" cin $end
$var wire 1 G" cout $end
$var wire 1 H" sum $end
$var wire 1 I" x $end
$var wire 1 J" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[19] $end
$scope module fulladd $end
$var wire 1 K" cin $end
$var wire 1 L" cout $end
$var wire 1 M" sum $end
$var wire 1 N" x $end
$var wire 1 O" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[20] $end
$scope module fulladd $end
$var wire 1 P" cin $end
$var wire 1 Q" cout $end
$var wire 1 R" sum $end
$var wire 1 S" x $end
$var wire 1 T" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[21] $end
$scope module fulladd $end
$var wire 1 U" cin $end
$var wire 1 V" cout $end
$var wire 1 W" sum $end
$var wire 1 X" x $end
$var wire 1 Y" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[22] $end
$scope module fulladd $end
$var wire 1 Z" cin $end
$var wire 1 [" cout $end
$var wire 1 \" sum $end
$var wire 1 ]" x $end
$var wire 1 ^" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[23] $end
$scope module fulladd $end
$var wire 1 _" cin $end
$var wire 1 `" cout $end
$var wire 1 a" sum $end
$var wire 1 b" x $end
$var wire 1 c" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[24] $end
$scope module fulladd $end
$var wire 1 d" cin $end
$var wire 1 e" cout $end
$var wire 1 f" sum $end
$var wire 1 g" x $end
$var wire 1 h" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[25] $end
$scope module fulladd $end
$var wire 1 i" cin $end
$var wire 1 j" cout $end
$var wire 1 k" sum $end
$var wire 1 l" x $end
$var wire 1 m" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[26] $end
$scope module fulladd $end
$var wire 1 n" cin $end
$var wire 1 o" cout $end
$var wire 1 p" sum $end
$var wire 1 q" x $end
$var wire 1 r" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[27] $end
$scope module fulladd $end
$var wire 1 s" cin $end
$var wire 1 t" cout $end
$var wire 1 u" sum $end
$var wire 1 v" x $end
$var wire 1 w" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[28] $end
$scope module fulladd $end
$var wire 1 x" cin $end
$var wire 1 y" cout $end
$var wire 1 z" sum $end
$var wire 1 {" x $end
$var wire 1 |" y $end
$upscope $end
$upscope $end
$scope begin gen_loop[29] $end
$scope module fulladd $end
$var wire 1 }" cin $end
$var wire 1 ~" cout $end
$var wire 1 !# sum $end
$var wire 1 "# x $end
$var wire 1 ## y $end
$upscope $end
$upscope $end
$scope begin gen_loop[30] $end
$scope module fulladd $end
$var wire 1 $# cin $end
$var wire 1 %# cout $end
$var wire 1 &# sum $end
$var wire 1 '# x $end
$var wire 1 (# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[31] $end
$scope module fulladd $end
$var wire 1 )# cin $end
$var wire 1 *# cout $end
$var wire 1 +# sum $end
$var wire 1 ,# x $end
$var wire 1 -# y $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder2 $end
$var wire 32 .# src1_i [31:0] $end
$var wire 32 /# sum_o [31:0] $end
$var wire 32 0# src2_i [31:0] $end
$var wire 33 1# carry [32:0] $end
$scope begin gen_loop[0] $end
$scope module fulladd $end
$var wire 1 2# cin $end
$var wire 1 3# cout $end
$var wire 1 4# sum $end
$var wire 1 5# x $end
$var wire 1 6# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[1] $end
$scope module fulladd $end
$var wire 1 7# cin $end
$var wire 1 8# cout $end
$var wire 1 9# sum $end
$var wire 1 :# x $end
$var wire 1 ;# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[2] $end
$scope module fulladd $end
$var wire 1 <# cin $end
$var wire 1 =# cout $end
$var wire 1 ># sum $end
$var wire 1 ?# x $end
$var wire 1 @# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[3] $end
$scope module fulladd $end
$var wire 1 A# cin $end
$var wire 1 B# cout $end
$var wire 1 C# sum $end
$var wire 1 D# x $end
$var wire 1 E# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[4] $end
$scope module fulladd $end
$var wire 1 F# cin $end
$var wire 1 G# cout $end
$var wire 1 H# sum $end
$var wire 1 I# x $end
$var wire 1 J# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[5] $end
$scope module fulladd $end
$var wire 1 K# cin $end
$var wire 1 L# cout $end
$var wire 1 M# sum $end
$var wire 1 N# x $end
$var wire 1 O# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[6] $end
$scope module fulladd $end
$var wire 1 P# cin $end
$var wire 1 Q# cout $end
$var wire 1 R# sum $end
$var wire 1 S# x $end
$var wire 1 T# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[7] $end
$scope module fulladd $end
$var wire 1 U# cin $end
$var wire 1 V# cout $end
$var wire 1 W# sum $end
$var wire 1 X# x $end
$var wire 1 Y# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[8] $end
$scope module fulladd $end
$var wire 1 Z# cin $end
$var wire 1 [# cout $end
$var wire 1 \# sum $end
$var wire 1 ]# x $end
$var wire 1 ^# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[9] $end
$scope module fulladd $end
$var wire 1 _# cin $end
$var wire 1 `# cout $end
$var wire 1 a# sum $end
$var wire 1 b# x $end
$var wire 1 c# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[10] $end
$scope module fulladd $end
$var wire 1 d# cin $end
$var wire 1 e# cout $end
$var wire 1 f# sum $end
$var wire 1 g# x $end
$var wire 1 h# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[11] $end
$scope module fulladd $end
$var wire 1 i# cin $end
$var wire 1 j# cout $end
$var wire 1 k# sum $end
$var wire 1 l# x $end
$var wire 1 m# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[12] $end
$scope module fulladd $end
$var wire 1 n# cin $end
$var wire 1 o# cout $end
$var wire 1 p# sum $end
$var wire 1 q# x $end
$var wire 1 r# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[13] $end
$scope module fulladd $end
$var wire 1 s# cin $end
$var wire 1 t# cout $end
$var wire 1 u# sum $end
$var wire 1 v# x $end
$var wire 1 w# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[14] $end
$scope module fulladd $end
$var wire 1 x# cin $end
$var wire 1 y# cout $end
$var wire 1 z# sum $end
$var wire 1 {# x $end
$var wire 1 |# y $end
$upscope $end
$upscope $end
$scope begin gen_loop[15] $end
$scope module fulladd $end
$var wire 1 }# cin $end
$var wire 1 ~# cout $end
$var wire 1 !$ sum $end
$var wire 1 "$ x $end
$var wire 1 #$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[16] $end
$scope module fulladd $end
$var wire 1 $$ cin $end
$var wire 1 %$ cout $end
$var wire 1 &$ sum $end
$var wire 1 '$ x $end
$var wire 1 ($ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[17] $end
$scope module fulladd $end
$var wire 1 )$ cin $end
$var wire 1 *$ cout $end
$var wire 1 +$ sum $end
$var wire 1 ,$ x $end
$var wire 1 -$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[18] $end
$scope module fulladd $end
$var wire 1 .$ cin $end
$var wire 1 /$ cout $end
$var wire 1 0$ sum $end
$var wire 1 1$ x $end
$var wire 1 2$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[19] $end
$scope module fulladd $end
$var wire 1 3$ cin $end
$var wire 1 4$ cout $end
$var wire 1 5$ sum $end
$var wire 1 6$ x $end
$var wire 1 7$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[20] $end
$scope module fulladd $end
$var wire 1 8$ cin $end
$var wire 1 9$ cout $end
$var wire 1 :$ sum $end
$var wire 1 ;$ x $end
$var wire 1 <$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[21] $end
$scope module fulladd $end
$var wire 1 =$ cin $end
$var wire 1 >$ cout $end
$var wire 1 ?$ sum $end
$var wire 1 @$ x $end
$var wire 1 A$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[22] $end
$scope module fulladd $end
$var wire 1 B$ cin $end
$var wire 1 C$ cout $end
$var wire 1 D$ sum $end
$var wire 1 E$ x $end
$var wire 1 F$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[23] $end
$scope module fulladd $end
$var wire 1 G$ cin $end
$var wire 1 H$ cout $end
$var wire 1 I$ sum $end
$var wire 1 J$ x $end
$var wire 1 K$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[24] $end
$scope module fulladd $end
$var wire 1 L$ cin $end
$var wire 1 M$ cout $end
$var wire 1 N$ sum $end
$var wire 1 O$ x $end
$var wire 1 P$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[25] $end
$scope module fulladd $end
$var wire 1 Q$ cin $end
$var wire 1 R$ cout $end
$var wire 1 S$ sum $end
$var wire 1 T$ x $end
$var wire 1 U$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[26] $end
$scope module fulladd $end
$var wire 1 V$ cin $end
$var wire 1 W$ cout $end
$var wire 1 X$ sum $end
$var wire 1 Y$ x $end
$var wire 1 Z$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[27] $end
$scope module fulladd $end
$var wire 1 [$ cin $end
$var wire 1 \$ cout $end
$var wire 1 ]$ sum $end
$var wire 1 ^$ x $end
$var wire 1 _$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[28] $end
$scope module fulladd $end
$var wire 1 `$ cin $end
$var wire 1 a$ cout $end
$var wire 1 b$ sum $end
$var wire 1 c$ x $end
$var wire 1 d$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[29] $end
$scope module fulladd $end
$var wire 1 e$ cin $end
$var wire 1 f$ cout $end
$var wire 1 g$ sum $end
$var wire 1 h$ x $end
$var wire 1 i$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[30] $end
$scope module fulladd $end
$var wire 1 j$ cin $end
$var wire 1 k$ cout $end
$var wire 1 l$ sum $end
$var wire 1 m$ x $end
$var wire 1 n$ y $end
$upscope $end
$upscope $end
$scope begin gen_loop[31] $end
$scope module fulladd $end
$var wire 1 o$ cin $end
$var wire 1 p$ cout $end
$var wire 1 q$ sum $end
$var wire 1 r$ x $end
$var wire 1 s$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope module Decoder $end
$var wire 6 t$ instr_op_i [5:0] $end
$var reg 1 : ALUSrc_o $end
$var reg 3 u$ ALU_op_o [2:0] $end
$var reg 1 / Branch_o $end
$var reg 1 + Extend_mux $end
$var reg 1 5 RegDst_o $end
$var reg 1 4 RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 v$ pc_addr_i [31:0] $end
$var reg 32 w$ instr_o [31:0] $end
$var integer 32 x$ i [31:0] $end
$upscope $end
$scope module MUX_bne_beq $end
$var wire 1 y$ data0_i $end
$var wire 1 # data1_i $end
$var wire 1 z$ select_i $end
$var reg 1 . data_o $end
$upscope $end
$scope module MUX_result_Src $end
$var wire 32 {$ data0_i [31:0] $end
$var wire 1 |$ select_i $end
$var wire 32 }$ data1_i [31:0] $end
$var reg 32 ~$ data_o [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 1 : select_i $end
$var wire 32 !% data1_i [31:0] $end
$var wire 32 "% data0_i [31:0] $end
$var reg 32 #% data_o [31:0] $end
$upscope $end
$scope module Mux_Extend $end
$var wire 1 + select_i $end
$var wire 32 $% data1_i [31:0] $end
$var wire 32 %% data0_i [31:0] $end
$var reg 32 &% data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Src $end
$var wire 32 '% data0_i [31:0] $end
$var wire 32 (% data1_i [31:0] $end
$var wire 1 )% select_i $end
$var reg 32 *% data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 +% data0_i [4:0] $end
$var wire 5 ,% data1_i [4:0] $end
$var wire 1 5 select_i $end
$var reg 5 -% data_o [4:0] $end
$upscope $end
$scope module Mux_shamt_src $end
$var wire 32 .% data0_i [31:0] $end
$var wire 1 /% select_i $end
$var wire 32 0% data1_i [31:0] $end
$var reg 32 1% data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 2% pc_in_i [31:0] $end
$var wire 1 " rst_i $end
$var reg 32 3% pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 4% RDaddr_i [4:0] $end
$var wire 32 5% RDdata_i [31:0] $end
$var wire 5 6% RSaddr_i [4:0] $end
$var wire 32 7% RSdata_o [31:0] $end
$var wire 5 8% RTaddr_i [4:0] $end
$var wire 32 9% RTdata_o [31:0] $end
$var wire 1 4 RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$upscope $end
$scope module SE $end
$var wire 16 :% data_i [15:0] $end
$var reg 32 ;% data_o [31:0] $end
$upscope $end
$scope module Shifter01 $end
$var wire 32 <% data_i [31:0] $end
$var wire 32 =% data_o [31:0] $end
$upscope $end
$scope module Shifter02 $end
$var wire 4 >% ALUCtrl_i [3:0] $end
$var wire 32 ?% src1_i [31:0] $end
$var wire 32 @% src2_i [31:0] $end
$var reg 32 A% data_o [31:0] $end
$upscope $end
$scope module Zf $end
$var wire 16 B% data_i [15:0] $end
$var wire 32 C% data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxxxxxxxxxxxxxx C%
bx B%
b0 A%
b0xxxxx @%
bx ?%
bx >%
bx00 =%
bx <%
bx ;%
bx :%
bx 9%
bx 8%
bx 7%
bx 6%
bx 5%
bx 4%
bx 3%
b0 2%
b0xxxxx 1%
bx 0%
x/%
b0xxxxx .%
bx -%
bx ,%
bx +%
bx *%
x)%
bx (%
bx '%
bx &%
bx %%
b0xxxxxxxxxxxxxxxx $%
bx #%
bx "%
bx !%
bx ~$
b0 }$
x|$
bx {$
xz$
xy$
b100000 x$
bx w$
bx v$
bx u$
bx t$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
0<#
0;#
x:#
x9#
08#
07#
06#
x5#
x4#
03#
02#
bx000 1#
bx00 0#
bx /#
bx .#
0-#
x,#
x+#
x*#
x)#
0(#
x'#
x&#
x%#
x$#
0##
x"#
x!#
x~"
x}"
0|"
x{"
xz"
xy"
xx"
0w"
xv"
xu"
xt"
xs"
0r"
xq"
xp"
xo"
xn"
0m"
xl"
xk"
xj"
xi"
0h"
xg"
xf"
xe"
xd"
0c"
xb"
xa"
x`"
x_"
0^"
x]"
x\"
x["
xZ"
0Y"
xX"
xW"
xV"
xU"
0T"
xS"
xR"
xQ"
xP"
0O"
xN"
xM"
xL"
xK"
0J"
xI"
xH"
xG"
xF"
0E"
xD"
xC"
xB"
xA"
0@"
x?"
x>"
x="
x<"
0;"
x:"
x9"
x8"
x7"
06"
x5"
x4"
x3"
x2"
01"
x0"
x/"
x."
x-"
0,"
x+"
x*"
x)"
x("
0'"
x&"
x%"
x$"
x#"
0""
x!"
x~
x}
x|
0{
xz
xy
xx
xw
0v
xu
xt
xs
xr
0q
xp
xo
xn
xm
0l
xk
xj
xi
xh
0g
xf
xe
xd
xc
0b
xa
x`
x_
x^
0]
x\
x[
xZ
xY
1X
xW
xV
xU
0T
0S
xR
xQ
0P
0O
0N
xM
xL
0K
0J
bx000 I
bx H
bx G
b100 F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
b0 =
bx <
bx ;
x:
bx 9
bx 8
bx 7
bx 6
x5
x4
bx 3
bx 2
b0xxxxxxxxxxxxxxxx 1
bx 0
x/
x.
bx -
bx ,
x+
bx00 *
bx )
bx (
bx '
bx &
b0xxxxx %
b0 $
x#
0"
0!
$end
#5
1.
1y$
0#
b100 =
b100 2%
1H#
0\#
1F#
0Z#
1B#
0V#
0C#
0q$
0l$
0g$
0b$
0]$
0X$
0S$
0N$
0I$
0D$
0?$
0:$
05$
00$
0+$
0&$
0!$
0z#
0u#
0p#
0k#
0f#
0a#
1W#
0R#
0M#
1A#
0o$
0j$
0e$
0`$
0[$
0V$
0Q$
0L$
0G$
0B$
0=$
08$
03$
0.$
0)$
0$$
0}#
0x#
0s#
0n#
0i#
0d#
0_#
0U#
0P#
0K#
1=#
0p$
0k$
0f$
0a$
0\$
0W$
0R$
0M$
0H$
0C$
0>$
09$
04$
0/$
0*$
0%$
0~#
0y#
0t#
0o#
0j#
0e#
0`#
0[#
0Q#
0L#
b11000 1#
0G#
0>#
0s$
0n$
0i$
0d$
0_$
0Z$
0U$
0P$
0K$
0F$
0A$
0<$
07$
02$
0-$
0($
0#$
0|#
0w#
0r#
0m#
0h#
0c#
0^#
1Y#
0T#
0O#
0J#
1E#
1@#
b10001100 *
b10001100 0#
b10001100 =%
0z$
b11111111111111111111111111111111 &
b11111111111111111111111111111111 ~$
b11111111111111111111111111111111 5%
b100 -
b100 *%
b0 6
b0 -%
b0 4%
b100011 ,
b100011 !%
b100011 &%
b100011 <%
b0 ;
b0 ?
b0 D
b0 u$
b11 3
b11 B
b11 #%
b11 ?%
b0 %
b0 1%
b0 @%
0r$
0m$
0h$
0c$
0^$
0Y$
0T$
0O$
0J$
0E$
0@$
0;$
06$
01$
0,$
0'$
0"$
0{#
0v#
0q#
0l#
0g#
0b#
0]#
0X#
0S#
0N#
0I#
0D#
0+#
0&#
0!#
0z"
0u"
0p"
0k"
0f"
0a"
0\"
0W"
0R"
0M"
0H"
0C"
0>"
09"
04"
0/"
0*"
0%"
0~
0y
0t
0o
0j
0e
0`
0[
09#
b10010000 0
b10010000 /#
b10010000 (%
04#
0)#
0$#
0}"
0x"
0s"
0n"
0i"
0d"
0_"
0Z"
0U"
0P"
0K"
0F"
0A"
0<"
07"
02"
0-"
0("
0#"
0|
0w
0r
0m
0h
0c
0^
0Y
0*#
0%#
0~"
0y"
0t"
0o"
0j"
0e"
0`"
0["
0V"
0Q"
0L"
0G"
0B"
0="
08"
03"
0."
0)"
0$"
0}
0x
0s
0n
0i
0d
0_
0Z
1?#
b0 I
0U
0:#
05#
b11111111111111111111111111111111 9
b11111111111111111111111111111111 E
b11111111111111111111111111111111 {$
0/%
0|$
0)%
1V
0Q
b100 (
b100 G
b100 .#
b100 '%
0L
b100011 2
b100011 %%
b100011 ;%
b110 <
b110 @
b110 A
b110 >%
0+
0/
15
14
0:
b0 ,%
b11 +%
b0 .%
b100011 1
b100011 $%
b100011 C%
b100011 B%
b100011 :%
b100011 >
b0 t$
b11 7
b11 "%
b11 9%
b11 8%
b10 8
b10 C
b10 0%
b10 7%
b10 6%
0,#
0'#
0"#
0{"
0v"
0q"
0l"
0g"
0b"
0]"
0X"
0S"
0N"
0I"
0D"
0?"
0:"
05"
00"
0+"
0&"
0!"
0z
0u
0p
0k
0f
0a
0\
0W
0R
0M
b10000110000000000100011 )
b10000110000000000100011 w$
b0 '
b0 H
b0 v$
b0 3%
1!
#10
0!
1"
#15
b1000 =
b1000 2%
1u#
1w#
b10000010001100 *
b10000010001100 0#
b10000010001100 =%
b1000 -
b1000 *%
b100 &
b100 ~$
b100 5%
b1 6
b1 -%
b1 4%
b100000100011 ,
b100000100011 !%
b100000100011 &%
b100000100011 <%
b101 3
b101 B
b101 #%
b101 ?%
0A#
b10000 1#
0=#
1D#
b10000010010100 0
b10000010010100 /#
b10000010010100 (%
1>#
1[
1Y
0?#
b1000 I
1U
b1000 (
b1000 G
b1000 .#
b1000 '%
0V
b100000100011 2
b100000100011 %%
b100000100011 ;%
b100 9
b100 E
b100 {$
b1 ,%
b101 +%
b100000100011 1
b100000100011 $%
b100000100011 C%
b100000100011 B%
b100000100011 :%
b101 7
b101 "%
b101 9%
b101 8%
b1001 8
b1001 C
b1001 0%
b1001 7%
b1001 6%
1W
b1001001010000100000100011 )
b1001001010000100000100011 w$
b100 '
b100 H
b100 v$
b100 3%
1!
#20
0!
#25
b1100 =
b1100 2%
1&$
1z#
1($
1|#
b10110000010001100 *
b10110000010001100 0#
b10110000010001100 =%
b1100 -
b1100 *%
b101 &
b101 ~$
b101 5%
b1011 6
b1011 -%
b1011 4%
b101100000100011 ,
b101100000100011 !%
b101100000100011 &%
b101100000100011 <%
b11111111111111111111111111111111 3
b11111111111111111111111111111111 B
b11111111111111111111111111111111 #%
b11111111111111111111111111111111 ?%
0M#
0K#
0G#
1F#
1A#
1B#
0I#
b11000 1#
1=#
1C#
0`
b10110000010011000 0
b10110000010011000 /#
b10110000010011000 (%
0>#
0^
0Y
1D#
0Z
1?#
b0 I
0U
1[
b1100 (
b1100 G
b1100 .#
b1100 '%
1V
b101100000100011 2
b101100000100011 %%
b101100000100011 ;%
b101 9
b101 E
b101 {$
b1011 ,%
b0 +%
b101100000100011 1
b101100000100011 $%
b101100000100011 C%
b101100000100011 B%
b101100000100011 :%
b11111111111111111111111111111111 7
b11111111111111111111111111111111 "%
b11111111111111111111111111111111 9%
b0 8%
b100 8
b100 C
b100 0%
b100 7%
b1 6%
1\
0W
b1000000101100000100011 )
b1000000101100000100011 w$
b1000 '
b1000 H
b1000 v$
b1000 3%
1!
#30
0!
#35
b10000 =
b10000 2%
0&$
0z#
0u#
0W#
0C#
0($
0|#
0w#
0Y#
0E#
0@#
b0 *
b0 0#
b0 =%
b10000 -
b10000 *%
0.
b11111111111111111111111111111111 &
b11111111111111111111111111111111 ~$
b11111111111111111111111111111111 5%
b0 6
b0 -%
b0 4%
b0 ,
b0 !%
b0 &%
b0 <%
0F#
1I#
0B#
1`
1^
0A#
1Z
b0 1#
0=#
0D#
b10000 0
b10000 /#
b10000 (%
0>#
0[
1Y
0?#
b11000 I
1U
b10000 (
b10000 G
b10000 .#
b10000 '%
0V
b0 2
b0 %%
b0 ;%
b0 <
b0 @
b0 A
b0 >%
0y$
1#
b11111111111111111111111111111111 9
b11111111111111111111111111111111 E
b11111111111111111111111111111111 {$
b0 ,%
b0 1
b0 $%
b0 C%
b0 B%
b0 :%
b0 >
b11111111111111111111111111111111 8
b11111111111111111111111111111111 C
b11111111111111111111111111111111 0%
b11111111111111111111111111111111 7%
b0 6%
1W
b0 )
b0 w$
b1100 '
b1100 H
b1100 v$
b1100 3%
1!
#40
0!
#45
b10100 =
b10100 2%
b10100 -
b10100 *%
0M#
0N#
1H#
0e
0C#
b10100 0
b10100 /#
b10100 (%
1>#
0c
0^
0Y
1I#
0_
0D#
0Z
1?#
b0 I
0U
1`
0[
b10100 (
b10100 G
b10100 .#
b10100 '%
1V
1a
0\
0W
b10000 '
b10000 H
b10000 v$
b10000 3%
1!
